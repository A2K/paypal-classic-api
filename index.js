// Generated by CoffeeScript 1.8.0
(function() {
  var API_LIVE_URL, API_SANDBOX_URL, API_VERSION, PayPal, querystring, request, util, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  request = require('request');

  querystring = require('querystring');

  _ = require('underscore');

  util = require('util');

  API_LIVE_URL = 'https://api-3t.paypal.com/nvp';

  API_SANDBOX_URL = 'https://api-3t.sandbox.paypal.com/nvp';

  API_VERSION = 94;

  PayPal = (function() {
    function PayPal(options) {
      this.call = __bind(this.call, this);
      this.apiUrl = options.live ? API_LIVE_URL : API_SANDBOX_URL;
      this.username = options.username;
      this.password = options.password;
      this.signature = options.signature;
    }

    PayPal.prototype.call = function(method, parameters, callback) {
      var args, k, processResponse, v;
      processResponse = function(text) {
        var data, extractValue, ids, k, key, p, params, response, rx, _i, _len, _ref;
        data = querystring.decode(text);
        if (data == null) {
          return typeof callback === "function" ? callback('invalid server response') : void 0;
        }
        response = {};
        _ref = ((function() {
          var _results;
          _results = [];
          for (k in data) {
            _results.push(k);
          }
          return _results;
        })()).filter(function(k) {
          return /^[A-Z]+$/.test(k);
        });
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          response[key] = data[key];
        }
        rx = /^L_([A-Z]+)(\d+)$/;
        params = (((function() {
          var _results;
          _results = [];
          for (k in data) {
            _results.push(k);
          }
          return _results;
        })()).map(function(key) {
          var parts;
          if (!rx.test(key)) {
            return;
          }
          parts = rx.exec(key);
          if (parts) {
            return [parts[1], parseInt(parts[2]), key];
          } else {
            return null;
          }
        })).filter(function(p) {
          return p != null;
        });
        ids = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = params.length; _j < _len1; _j++) {
            p = params[_j];
            _results.push(p[1]);
          }
          return _results;
        })();
        ids = _.uniq(_.flatten(ids));
        extractValue = function(key, value) {
          var date;
          if (!isNaN(value)) {
            value = parseFloat(value);
          }
          if (key === 'TIMESTAMP' || /.+DATE$/.test(key)) {
            date = new Date(value);
            if (date && !isNaN(date.getYear())) {
              value = date;
            }
          }
          return value;
        };
        response["objects"] = ids.map(function(id) {
          var obj, param, _j, _len1;
          obj = {};
          for (_j = 0, _len1 = params.length; _j < _len1; _j++) {
            param = params[_j];
            if (id === param[1]) {
              obj[param[0]] = extractValue(param[0], data[param[2]]);
            }
          }
          return obj;
        });
        return response;
      };
      args = {
        USER: this.username,
        PWD: this.password,
        SIGNATURE: this.signature,
        METHOD: method,
        VERSION: API_VERSION
      };
      for (k in parameters) {
        v = parameters[k];
        args[k] = v;
      }
      return request.post({
        url: this.apiUrl,
        body: querystring.encode(args)
      }, function(error, response, body) {
        if (error) {
          return typeof callback === "function" ? callback(error) : void 0;
        }
        return typeof callback === "function" ? callback(null, processResponse(body)) : void 0;
      });
    };

    return PayPal;

  })();

  module.exports = PayPal;

}).call(this);
