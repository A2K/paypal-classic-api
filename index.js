// Generated by CoffeeScript 1.8.0
(function() {
  var API_URL, PayPal, querystring, request, util, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  request = require('request');

  querystring = require('querystring');

  _ = require('underscore');

  util = require('util');

  API_URL = 'https://api-3t.sandbox.paypal.com/nvp';

  PayPal = (function() {
    function PayPal(options) {
      this.call = __bind(this.call, this);
      this.username = options.username;
      this.password = options.password;
      this.signature = options.signature;
    }

    PayPal.prototype.call = function(method, parameters, callback) {
      var args, k, processResponse, v;
      processResponse = function(text) {
        var data, ids, k, p, params;
        data = querystring.decode(text);
        if (!data) {
          if (typeof callback === "function") {
            callback('invalid server response');
          }
        }
        params = (((function() {
          var _results;
          _results = [];
          for (k in data) {
            _results.push(k);
          }
          return _results;
        })()).map(function(key) {
          var parts;
          parts = /L_([A-Z]+)(\d+)/.exec(key);
          if (parts) {
            return [parts[1], parseInt(parts[2]), key];
          } else {
            return [];
          }
        })).filter(function(p) {
          return p[0] && (p[1] !== null && typeof p[1] !== 'undefined');
        });
        ids = (_.uniq(_.flatten((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = params.length; _i < _len; _i++) {
            p = params[_i];
            _results.push(p[1]);
          }
          return _results;
        })()))).filter(function(p) {
          return typeof p !== 'undefined';
        });
        return ids.map(function(id) {
          var obj, param, _i, _len;
          obj = {};
          for (_i = 0, _len = params.length; _i < _len; _i++) {
            param = params[_i];
            if (id === param[1]) {
              obj[param[0]] = data[param[2]];
            }
          }
          return obj;
        });
      };
      args = {
        USER: this.username,
        PWD: this.password,
        SIGNATURE: this.signature,
        METHOD: method,
        VERSION: 94
      };
      for (k in parameters) {
        v = parameters[k];
        args[k] = v;
      }
      return request.post({
        url: API_URL,
        body: querystring.encode(args)
      }, function(error, response, body) {
        if (error) {
          return typeof callback === "function" ? callback(error) : void 0;
        }
        return typeof callback === "function" ? callback(null, processResponse(body)) : void 0;
      });
    };

    return PayPal;

  })();

  module.exports = PayPal;

}).call(this);
